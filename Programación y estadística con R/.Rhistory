install.packages("Rcmdr")
? read.table
library(Rcmdr)
5+9
y<- 4+5
y
factorial(8)
factorial(9)
class(y)
x<- "perrito"
class(x)
lista <- c("perrito", "gato")
class(lista)
lista[0]
lista[1]
lista[3]<- "loro"
lista[4]<- 5
lista2 <- c(5, 2, 3, 4)
class(lista2)
lista2[5] <- "h"
lista2
lista2[5] <-
/n
length(lista2)
length(lista)
MatrizP <- c(lista, lista2)
MatrizP2 <- c(lista2, lista)
MatrizP3 <- c(c(1,2,3,4), c(8,6,5,7))
? cbinf
? cbind
Matriz <-[cbind(lista), rbind(lista2)]
Matriz <- c[cbind(lista), rbind(lista2)]
Matriz <- [rbind(lista), rbind(lista2)]
Matriz <- (cbind(lista), rbind(lista2))
Matriz <- (cbind(lista) rbind(lista2))
Matriz <- cbind(lista, lista2)
Matriz
lista[5] <- "tortuga"
? matrix
Matriz <- matrix(lista, lista2)
Matriz2 <- matrix(lista, lista2)
Matriz <- matrix(c(lista, lista2), nrow)
Matriz <- matrix(c(lista, lista2), nrow = 2, ncol = 5)
Matriz
Matriz <- matrix(c(lista, lista2), nrow = 5, ncol = 2)
Matriz
numeros <- c(1,2,3,4,5,6,7,8,9)
Matriz <- matrix(c(lista, numeros), nrow = 5, ncol = 2)
Matriz <- matrix(c(lista, numeros), nrow = 9, ncol = 2)
Matriz
Matriz <- matrix(c(lista, numeros), byrow = TRUE, fill = 0)
? rnorm
? show
View(Matriz)
View(Matriz)
View(Matriz)
load("aleatorios.RData")
aleatorios <-rnorm(1000,mean=10,sd=3)
hist(aleatorios)
plot(density(aleatorios))
head(aleatorios, n=10)
save(aleatorios, file = "aleatorios.RData")
load("aleatorios.RData")
aleatorios[1:10]
install.packages("BiocManager")
BiocManager::install(c("graph", "RBGL", "Rgraphviz"))
install.packages("bnlearn")
library(bnlearn)
install.packages(fastmap)
install.packages("fastmap")
install.packages("sparklyr")
library(fastmap)
library(sparklyr)
spark_install("2.3.1")
sc <- spark_connect(master = "local", version = "2.3.1")
spark_install("2.4.3")
sc <- spark_connect(master = "local", version = "2.4.3")
sc <- spark_connect(master = "local", version = "3.0.0")
spark_install("3.0.0")
sc <- spark_connect(master = "local", version = "3.0.0")
;
<
>
cscs
sc <- spark_connect(master = "local", version = "3.0.0");
Sys.getenv()
library(ggplot2)
library(tidyverse)
library(nycflights13)
library(sparklyr)
spark_install("3.0.0")
sc<-spark_connect(master="local", version="3.0.0")
library(ggplot2)
library(tidyverse)
library(nycflights13)
library(sparklyr)
spark_install("3.0.0")
sc<-spark_connect(master="local", version="3.0.0")
library(ggplot2)
library(tidyverse)
library(nycflights13)
library(sparklyr)
spark_install("3.0.0")
sc<-spark_connect(master="local", version="3.0.0")
sc<-spark_connect(master="local")
options(sparklyr.console.log = TRUE)
sc <- spark_connect(...)
options(sparklyr.console.log = TRUE)
library(sparklyr)
sc <- spark_connect(...)
library(ggplot2)
library(tidyverse)
library(nycflights13)
library(sparklyr)
spark_install("3.0.0")
sc<-spark_connect(master="local", version="3.0.0")
View(sc)
library(fastmap)
library(sparklyr)
spark_install("3.0.0")
sc<-spark_connect(master="local", version="3.0.0")
u1011 <- ("https://www.football-data.co.uk/mmz4281/1011/SP1.csv")
u1012 <- ("https://www.football-data.co.uk/mmz4281/1012/SP1.csv")
u1013 <- ("https://www.football-data.co.uk/mmz4281/1013/SP1.csv")
u1014 <- ("https://www.football-data.co.uk/mmz4281/1014/SP1.csv")
download.file(url= u1011, destfile = "SP1-1011.csv", mode = "wb")
download.file(url= u1012, destfile = "SP1-1012.csv", mode = "wb")
download.file(url= u1013, destfile = "SP1-1013.csv", mode = "wb")
download.file(url= u1014, destfile = "SP1-1014.csv", mode = "wb")
u1011 <- "https://www.football-data.co.uk/mmz4281/1011/SP1.csv"
u1011 <- "https://www.football-data.co.uk/mmz4281/1011/SP1.csv"
u1012 <- "https://www.football-data.co.uk/mmz4281/1012/SP1.csv"
u1013 <- "https://www.football-data.co.uk/mmz4281/1013/SP1.csv"
u1014 <- "https://www.football-data.co.uk/mmz4281/1014/SP1.csv"
download.file(url= u1011, destfile = "SP1-1011.csv", mode = "wb")
download.file(url= u1012, destfile = "SP1-1012.csv", mode = "wb")
download.file(url= u1013, destfile = "SP1-1013.csv", mode = "wb")
download.file(url= u1014, destfile = "SP1-1014.csv", mode = "wb")
u1011 <- "https://www.football-data.co.uk/mmz4281/1011/SP1.csv"
u1112 <- "https://www.football-data.co.uk/mmz4281/1112/SP1.csv"
u1213 <- "https://www.football-data.co.uk/mmz4281/1213/SP1.csv"
u1314 <- "https://www.football-data.co.uk/mmz4281/1314/SP1.csv"
download.file(url= u1011, destfile = "SP1-1011.csv", mode = "wb")
download.file(url= u1112, destfile = "SP1-1112.csv", mode = "wb")
download.file(url= u1213, destfile = "SP1-1213.csv", mode = "wb")
download.file(url= u1314, destfile = "SP1-1314.csv", mode = "wb")
library(dplyr)
lista <- lapply(dir(pattern = "SP1"), read.csv )
lista <- lapply(list.files(pattern = "SP" ), read.csv )
View(lista)
lista <- lapply(lista, select, Date: FTR)
head(lista[[1]]); head(lista[[2]]); head(lista[[3]]); head(lista[[4]])
setwd("H:/Documentos/Escuela casa/Bedu/Análisis de datos/Programación y estadística con R")
conf <- read.csv("st19ncov-confirmados.csv")
dec <- read.csv("st19ncov-muertes.csv")
str(conf): str(dec)
View(conf)
View(conf)
str(conf); str(dec)
head(conf); head(dec)
Sconf <- conf[-1, ]
Sdec <- dec[-1, ]
Sconf <- select(Sconf, Country.Region, Date, Value)
Sconf <- rename(Sconf, Country = Country.Region, Fecha = Date, Infectados = Value)
str(Sconf)
Sconf <- mutate(Sconf, Fecha = as.Date(Fecha, "%Y-%m-%d"), Infectados = as.numeric(Infectados))
Sconf
Sdec <- select(Sdec, Country.Region, Date, Value)
Sdec <- rename(Sdec, Country = Country.Region, Fecha = Date, Infectados = Value)
Sdec <- mutate(Sdec, Fecha = as.Date(Fecha, "%Y-%m-%d"), Infectados = as.numeric(Infectados))
View(Sdec)
View(Sdec)
Scm <- merge(Sconf, Sdec)
View(Scm)
View(Scm)
dim(Scm)
str(Sdec)
Sdec <- select(Sdec, Country.Region, Date, Value)
Sdec <- dec[-1, ]
Sdec <- select(Sdec, Country.Region, Date, Value)
Sdec <- rename(Sdec, Country = Country.Region, Fecha = Date, Descesos = Value)
Sdec <- mutate(Sdec, Fecha = as.Date(Fecha, "%Y-%m-%d"), Descesos = as.numeric(Descesos))
str(Sdec)
Scm <- merge(Sconf, Sdec)
View(Scm)
Sdec <- dec[-1, ]
Sdec <- mutate(Sdec, Fecha = as.Date(Fecha, "%Y-%m-%d"), Decesos = as.numeric(Decesos))
str(Sdec)
Scm <- merge(Sconf, Sdec)
dim(Scm)
Sdec <- dec[-1, ]
Sdec <- select(Sdec, Country.Region, Date, Value)
Sdec <- rename(Sdec, Country = Country.Region, Fecha = Date, Decesos = Value)
Sdec <- mutate(Sdec, Fecha = as.Date(Fecha, "%Y-%m-%d"), Decesos = as.numeric(Decesos))
str(Sdec)
Scm <- merge(Sconf, Sdec)
dim(Scm)
mex <- filter(Scm, Country == "Mexico")
mex <- filter(mex, infectados != 0)
mex <- filter(mex, Infectados != 0)
mex <- mutate(mex, Letalidad = round(Decesos/Infectados*100, 1))
mex <- filter(Scm, Country == "Mexico")
mex <- filter(mex, Infectados != 0)
mex <- mutate(mex, NI = c(1, diff(Infectados))) # Nuevos infectados por día
mex <- mutate(mex, ND = c(0, diff(Decesos))) # Nuevos decesos por día
View(mex)
ex <- mutate(mex, FCI = Infectados/IDA, FCD = Decesos/DDA) # Factores de crecimiento
mex <- mutate(mex, Dia = 1:dim(mex)[1]) # Dias de contingencia
mex <- mutate(mex, FCI = Infectados/IDA, FCD = Decesos/DDA) # Factores de crecimiento
mex <- mutate(mex, IDA = lag(Infectados), DDA = lag(Decesos)) # valores del día anterior
mex <- mutate(mex, FCI = Infectados/IDA, FCD = Decesos/DDA) # Factores de crecimiento
mex <- mutate(mex, Dia = 1:dim(mex)[1]) # Dias de contingencia
View(Sdec)
View(mex)
mex <- filter(Scm, Country == "Mexico")
mex <- filter(mex, Infectados != 0)
mex <- mutate(mex, NI = c(1, diff(Infectados))) # Nuevos infectados por día
mex <- mutate(mex, ND = c(0, diff(Decesos))) # Nuevos decesos por día
mex <- mutate(mex, Letalidad = round(Decesos/Infectados*100, 1)) # Taza de letalidad
mex <- mutate(mex, IDA = lag(Infectados), DDA = lag(Decesos)) # valores del día anterior
mex <- mutate(mex, FCI = Infectados/IDA, FCD = Decesos/DDA) # Factores de crecimiento
mex <- mutate(mex, Dia = 1:dim(mex)[1]) # Dias de contingencia
View(mex)
set.seed(134)
x <- round(rnorm(1000, 175, 6), 1)
# Media
mean(x)
# Mediana
x
# Mediana
median(x)
# Moda
mode(x)
# Moda
mode <- function(x) {
return(as.numeric(names(which.max(table(x)))))
}
mode(x)
library(DescTools)
install.packages("DescTools")
library(DescTools)
Mode(x)
mode(x)
#deciles
quantile(x, seq(0.1, 0.9, by=0.1))
IQR(x)
sd(x)
var(x)
#Media
x[500]
# Media
mean(x)
#Media
x[499]
#Media
x[501]
#Media
length(x)
xSorted <- sort(x)
length(x)%2
length(x)%%2
if(n%%2 == 0){
return((x[n/2]+x[(n/2)+1])/2)
}else{
return(x[(n+1)/2])
}
return(xSorted[(n+1)/2])
length(x)
n2<-as.numeric(length(x))
n2
n <- as.numeric(length(x))
mediana <- function(x){
xSorted <- sort(x)
n <- as.numeric(length(x))
if(n%%2 == 0){
return((xSorted[n/2]+xSorted[(n/2)+1])/2)
}else{
return(xSorted[(n+1)/2])
}
}
mediana(x)
f.17.18 <- read.csv("2017_2018.csv")
f.18.19
f.18.19
f.18.19 <- read.csv("2018_2019.csv")
f.19.20 <- read.csv("2019_2020.csv")
f.20.21 <- read.csv("2020_2021.csv")
library(dplyr)
library(ggplot2)
names(mtcars)
ggplot(mtcars, aes(x=cyl, y=hp, colour = mpg)) + geom_point()
# Graficamos las variables cyl en el ejex y hp en y, observa el comando geom_point()
# geom_point() es el tipo de geometría
ggplot(mtcars, aes(x=cyl, y=hp, colour = mpg)) + geom_bar()
# Graficamos las variables cyl en el ejex y hp en y, observa el comando geom_point()
# geom_point() es el tipo de geometría
ggplot(mtcars, aes(x=cyl, y=hp, colour = mpg)) + geom_point()
# Graficamos las variables cyl en el ejex y hp en y, observa el comando geom_point()
# geom_point() es el tipo de geometría
ggplot(mtcars, aes(x=cyl, y=hp, colour = mpg)) + geom_point()
ggplot(mtcars, aes(x=cyl, y=hp, colour = mpg)) + geom_point() +
theme_gray() + # Temas (intentar cambiarlo)
facet_wrap("cyl") # Lo vidive por el número de cilindros
ggplot(mtcars, aes(x=cyl, y=hp, colour = mpg)) + geom_point() +
theme_gray() +
facet_wrap("cyl") +
xlab("Núm cilindros") +
ylab("Caballos de fuerza")
ggplot(mtcars, aes(x=cyl, y=hp, colour = mpg)) + geom_point() +
theme_gray() +
facet_wrap("cyl") +
xlab("Núm cilindros") +
ylab("Caballos de fuerza")
ggplot(mtcars, aes(x=cyl, y=hp, colour = mpg)) + geom_point() +
theme_gray() +
facet_wrap("am") +
xlab("Núm cilindros") +
ylab("Caballos de fuerza")
install.packages("plotly")
library(plotly)
ggplot(mtcars, aes(x=cyl, y=hp, colour = mpg)) + geom_point() +
theme_gray() +
facet_wrap("am") +
xlab("Núm cilindros") +
ylab("Caballos de fuerza") +
ggtitle("Gráficas de mtcars")
p <- ggplot(mtcars, aes(x=cyl, y=hp, colour = mpg)) + geom_point() +
theme_gray() +
facet_wrap("am") +
xlab("Núm cilindros") +
ylab("Caballos de fuerza") +
ggtitle("Gráficas de mtcars")
ggplotly(p)
# Ejemplo 2 Sesion 3
library(dplyr)
uboxp <- "https://github.com/beduExpert/Programacion-con-R-2021/blob/main/Sesion-03/Data/boxp.csv"
download.file(url= uboxp, destfile = "boxp.csv", mode = "wb")
data <- read.csv("boxp.csv")
View(data)
data <- read.csv("boxp.csv")
View(data)
hist(data$Mediciones)
hist(data$Mediciones, breaks = seq(0,300,20),
main = "Histograma de Mediciones",
xlab = "Mediciones",
ylab = "Frecuencia")
data <- na.omit(Data)
data <- na.omit(data)
p <- data %>% # pipe
ggplot() +
aes(Mediciones) +
geom_histogram(binwidth = 20)
p <- ggplot(data, aes(Mediciones)) +
geom_histogram(binwidth = 20)
data %>% # pipe
ggplot() +
aes(Mediciones) +
geom_histogram(binwidth = 10, col = "black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
xlab("Mediciones") +
ylab("Frecuencia") +
theme_gray()
(my_scatplot <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point())
my_scatplot <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", se = T)
my_scatplot
my_scatplot <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()
my_scatplot
my_scatplot <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", se = T)
my_scatplot
my_scatplot + xlab(x = "Weigth (x 1000lbs)",
y = "Miles per gallon",
colour = "Number of\nCylinders",
title = "MTCARS")
my_scatplot <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", se = T) # Modelo lineal,
my_scatplot + xlab(x = "Weigth (x 1000lbs)",
y = "Miles per gallon",
colour = "Number of\nCylinders",
title = "MTCARS")
my_scatplot + xlab('Weight (x 1000lbs)') + ylab('Miles per Gallon')
my_scatplot + labs(x='Weight (x1000lbs)',y='Miles per Gallon',colour='Number of\n Cylinders')
my_scatplot + facet_wrap("cyl")
my_scatplot + facet_wrap("am")
my_scatplot + xlab('Weight (x 1000lbs)') + ylab('Miles per Gallon')
(my_scatplot <- ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point())
my_scatplot + facet_wrap("cyl")
my_scatplot + facet_wrap("am")
my_scatplot + facet_grid(am~cyl)
my_scatplot + facet_grid(am~vs)
# Comenzamos leyendo un fichero, el cual contiene informaciÃ³n sobre dos grupos
# de control G1 y G2, a los cuales se les realizÃ³ a cada uno una mediciÃ³n
# en 3 momentos diferentes C1, C2 y C3
# library(dplyr) # para usar mutate
data <- read.csv("boxp.csv")
head(data)
names(data)
summary(data)
bien <- complete.cases(data)
data <- data[bien,]
data <- mutate(data, Categoria = factor(Categoria), Grupo = factor(Grupo))
ggplot(data, aes(x = Categoria, y = Mediciones, fill = Grupo)) + geom_boxplot() +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
